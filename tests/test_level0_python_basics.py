"""
üü¶ LEVEL 0: –û—Å–Ω–æ–≤—ã Python –∏ Unit-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

–≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –ö–∞–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–π Python –∫–æ–¥ (–Ω–µ API)
- –ß—Ç–æ —Ç–∞–∫–æ–µ unit-—Ç–µ—Å—Ç—ã
- –û—Å–Ω–æ–≤—ã pytest –Ω–∞ –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö

–ó–∞–ø—É—Å–∫: pytest tests/test_level0_python_basics.py -v
"""
import pytest
from src.pet import Pet


class TestPythonBasics:
    """–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ unit-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def setup_method(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–∏—Ç–æ–º—Ü–µ–≤
        Pet.total_pets = 0
    
    @pytest.mark.level0
    def test_pet_creation_example(self):
        """
        –ü—Ä–∏–º–µ—Ä 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞
        
        –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
        - –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        - –ë–∞–∑–æ–≤—ã–µ assertions
        """
        # –°–æ–∑–¥–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞
        dog = Pet("–ë–æ–±–∏–∫", "—Å–æ–±–∞–∫–∞", 3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        assert dog.name == "–ë–æ–±–∏–∫"
        assert dog.animal_type == "—Å–æ–±–∞–∫–∞"
        assert dog.age == 3
        assert dog.is_hungry == True  # –ù–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü –≤—Å–µ–≥–¥–∞ –≥–æ–ª–æ–¥–µ–Ω
        assert dog.friends == []      # –£ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π
        
        print(f"‚úÖ –ü–∏—Ç–æ–º–µ—Ü {dog.name} —Å–æ–∑–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    
    @pytest.mark.level0
    def test_pet_methods_example(self):
        """
        –ü—Ä–∏–º–µ—Ä 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ (—Ñ—É–Ω–∫—Ü–∏–π) –∫–ª–∞—Å—Å–∞
        
        –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
        - –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–æ–≤
        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        """
        cat = Pet("–ú—É—Ä–∫–∞", "–∫–æ—à–∫–∞", 2)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ introduce()
        introduction = cat.introduce()
        expected_text = "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ú—É—Ä–∫–∞, —è –∫–æ—à–∫–∞, –º–Ω–µ 2 –ª–µ—Ç"
        assert introduction == expected_text
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ feed()
        assert cat.is_hungry == True  # –°–Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ–¥–Ω–∞—è
        
        result = cat.feed()
        assert "–ø–æ–∫—É—à–∞–ª –∏ —Ç–µ–ø–µ—Ä—å –¥–æ–≤–æ–ª–µ–Ω" in result
        assert cat.is_hungry == False  # –ü–æ—Å–ª–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è –Ω–µ –≥–æ–ª–æ–¥–Ω–∞—è
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∫–æ—Ä–º–∏—Ç—å –µ—â–µ —Ä–∞–∑
        result2 = cat.feed()
        assert "—É–∂–µ —Å—ã—Ç" in result2
        assert cat.is_hungry == False  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        
        print("‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    
    @pytest.mark.level0
    def test_friends_functionality_example(self):
        """
        –ü—Ä–∏–º–µ—Ä 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–∞–º–∏
        
        –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
        - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–æ–∫
        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–ø–∏—Å–∫–∞
        - –†–∞–±–æ—Ç–∞ —Å –º–µ—Ç–æ–¥–∞–º–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–º–∏ —á–∏—Å–ª–∞
        """
        dog = Pet("–†–µ–∫—Å", "—Å–æ–±–∞–∫–∞", 4)
        
        # –í –Ω–∞—á–∞–ª–µ –¥—Ä—É–∑–µ–π –Ω–µ—Ç
        assert dog.get_friends_count() == 0
        assert len(dog.friends) == 0
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥—Ä—É–≥–∞
        result1 = dog.add_friend("–ú—É—Ä–∫–∞")
        assert "–ú—É—Ä–∫–∞ —Ç–µ–ø–µ—Ä—å –¥—Ä—É–≥ –†–µ–∫—Å" in result1
        assert dog.get_friends_count() == 1
        assert "–ú—É—Ä–∫–∞" in dog.friends
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ –¥—Ä—É–≥–∞
        dog.add_friend("–®–∞—Ä–∏–∫")
        assert dog.get_friends_count() == 2
        assert len(dog.friends) == 2
        assert "–®–∞—Ä–∏–∫" in dog.friends
        
        print(f"‚úÖ –£ {dog.name} —Ç–µ–ø–µ—Ä—å {dog.get_friends_count()} –¥—Ä—É–∑–µ–π!")
    
    @pytest.mark.level0
    def test_birthday_math_example(self):
        """
        –ü—Ä–∏–º–µ—Ä 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        
        –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
        - –ò–∑–º–µ–Ω–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ –∏ –ø–æ—Å–ª–µ
        """
        pet = Pet("–¢—É–∑–∏–∫", "—Å–æ–±–∞–∫–∞", 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
        assert pet.age == 1
        
        # –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!
        result = pet.have_birthday()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ–∑—Ä–∞—Å—Ç —É–≤–µ–ª–∏—á–∏–ª—Å—è
        assert pet.age == 2
        assert "–ë—ã–ª–æ 1 –ª–µ—Ç, —Å—Ç–∞–ª–æ 2 –ª–µ—Ç" in result
        
        # –ï—â–µ –æ–¥–∏–Ω –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
        pet.have_birthday()
        assert pet.age == 3
        
        print(f"‚úÖ {pet.name} –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ç–∞—Ä–µ–µ—Ç!")
    
    @pytest.mark.level0
    def test_class_variable_example(self):
        """
        –ü—Ä–∏–º–µ—Ä 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–∞
        
        –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
        - –û–±—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        - –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
        - –°—á–µ—Ç—á–∏–∫–∏ –∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        """
        # –í –Ω–∞—á–∞–ª–µ –ø–∏—Ç–æ–º—Ü–µ–≤ –Ω–µ—Ç
        assert Pet.get_total_pets() == 0
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
        pet1 = Pet("–ë–∞—Ä—Å–∏–∫", "–∫–æ—Ç", 3)
        assert Pet.get_total_pets() == 1
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
        pet2 = Pet("–î—Ä—É–∂–æ–∫", "—Å–æ–±–∞–∫–∞", 2)
        assert Pet.get_total_pets() == 2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—á–µ—Ç—á–∏–∫ –æ–±—â–∏–π –¥–ª—è –≤—Å–µ—Ö
        assert pet1.total_pets == 2
        assert pet2.total_pets == 2
        
        print(f"‚úÖ –°—á–µ—Ç—á–∏–∫ –ø–∏—Ç–æ–º—Ü–µ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç: {Pet.get_total_pets()}")


class TestPythonDataTypes:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö Python"""
    
    @pytest.mark.level0
    def test_data_types_example(self):
        """
        –ü—Ä–∏–º–µ—Ä 6: –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ Python
        
        –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
        - –°—Ç—Ä–æ–∫–∏ (str)
        - –ß–∏—Å–ª–∞ (int, float)
        - –ë—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è (bool)
        - –°–ø–∏—Å–∫–∏ (list)
        """
        pet = Pet("–ú—É—Ö—Ç–∞—Ä", "—Å–æ–±–∞–∫–∞", 5)
        
        # –°—Ç—Ä–æ–∫–∏ (str)
        assert isinstance(pet.name, str)
        assert isinstance(pet.animal_type, str)
        
        # –ß–∏—Å–ª–∞ (int)
        assert isinstance(pet.age, int)
        
        # –ë—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è (bool)
        assert isinstance(pet.is_hungry, bool)
        assert pet.is_hungry in [True, False]
        
        # –°–ø–∏—Å–∫–∏ (list)
        assert isinstance(pet.friends, list)
        
        # –ú–æ–∂–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –≤ —Å–ø–∏—Å–æ–∫
        pet.friends.append("–ù–æ–≤—ã–π –¥—Ä—É–≥")
        assert len(pet.friends) == 1
        
        print("‚úÖ –í—Å–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")


class TestPythonConditions:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ª–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏"""
    
    @pytest.mark.level0  
    def test_if_else_logic_example(self):
        """
        –ü—Ä–∏–º–µ—Ä 7: –£—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ (if/else)
        
        –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
        - –£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
        - –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        - –†–∞–∑–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π
        """
        hungry_pet = Pet("–ì–æ–ª–æ–¥–Ω—ã–π", "–∫–æ—Ç", 1)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏–µ "–µ—Å–ª–∏ –≥–æ–ª–æ–¥–µ–Ω"
        assert hungry_pet.is_hungry == True
        result = hungry_pet.feed()
        assert "–ø–æ–∫—É—à–∞–ª –∏ —Ç–µ–ø–µ—Ä—å –¥–æ–≤–æ–ª–µ–Ω" in result
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏–µ "–µ—Å–ª–∏ –Ω–µ –≥–æ–ª–æ–¥–µ–Ω"
        assert hungry_pet.is_hungry == False
        result = hungry_pet.feed()
        assert "—É–∂–µ —Å—ã—Ç" in result
        
        print("‚úÖ –£—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")


# üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò (–¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞ –≤–∏–¥–µ–æ)

def demo_variables():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–¥–µ–æ"""
    print("\n" + "="*50)
    print("üìö –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–ï–†–ï–ú–ï–ù–ù–´–•")
    print("="*50)
    
    # –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    name = "–®–∞—Ä–∏–∫"          # —Å—Ç—Ä–æ–∫–∞
    age = 3                 # —á–∏—Å–ª–æ
    weight = 15.5           # –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ
    is_happy = True         # True/False
    toys = ["–º—è—á", "–∫–æ—Å—Ç—å"] # —Å–ø–∏—Å–æ–∫
    
    print(f"name = '{name}'")
    print(f"age = {age}")
    print(f"weight = {weight}")
    print(f"is_happy = {is_happy}")
    print(f"toys = {toys}")
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    print(f"\n{name} –≤–µ—Å–∏—Ç {weight} –∫–≥ –∏ –µ–º—É {age} –ª–µ—Ç")
    if is_happy:
        print(f"{name} —Å—á–∞—Å—Ç–ª–∏–≤! üòä")


def demo_functions():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≤–∏–¥–µ–æ"""
    print("\n" + "="*50)
    print("üîß –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –§–£–ù–ö–¶–ò–ô")
    print("="*50)
    
    def greet_pet(pet_name, pet_type):
        """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        greeting = f"–ü—Ä–∏–≤–µ—Ç, {pet_name}! –¢—ã –æ—Ç–ª–∏—á–Ω—ã–π {pet_type}!"
        return greeting
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    message = greet_pet("–ë–æ–±–∏–∫", "–ø–µ—Å")
    print(message)
    
    def calculate_pet_age_in_months(years):
        """–§—É–Ω–∫—Ü–∏—è —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏"""
        months = years * 12
        return months
    
    pet_years = 2
    pet_months = calculate_pet_age_in_months(pet_years)
    print(f"\n{pet_years} –ª–µ—Ç = {pet_months} –º–µ—Å—è—Ü–µ–≤")


if __name__ == "__main__":
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–ø—Ä—è–º—É—é:
    python tests/test_level0_python_basics.py
    """
    demo_variables()
    demo_functions()
    
    print("\n" + "="*50)
    print("üêï –°–û–ó–î–ê–ù–ò–ï –ü–ò–¢–û–ú–¶–ê")
    print("="*50)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    my_pet = Pet("–î–µ–º–æ-–ø–µ—Å", "—Å–æ–±–∞–∫–∞", 2)
    print(my_pet.introduce())
    print(my_pet.feed())
    print(my_pet.add_friend("–î–µ–º–æ-–∫–æ—Ç"))
    print(my_pet.have_birthday())
    print(my_pet.get_info()) 