"""
üü¢ LEVEL 1: –ì–æ—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏

–≠—Ç–∏ —Ç–µ—Å—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: pytest tests/test_level1_examples.py -v
"""
import pytest
from utils.api_client import APIClient


class TestLevel1Examples:
    """–ì–æ—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ"""
    
    def setup_method(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.client = APIClient()
    
    @pytest.mark.level1
    def test_get_store_inventory_example(self):
        """
        –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –º–∞–≥–∞–∑–∏–Ω–∞
        
        –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º:
        - –°—Ç–∞—Ç—É—Å –∫–æ–¥ 200 (—É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
        - –û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        - –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ
        """
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å
        response = self.client.get("/store/inventory")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
        assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª–∏ 200, –ø–æ–ª—É—á–∏–ª–∏ {response.status_code}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
        inventory = response.json()
        assert isinstance(inventory, dict), "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"
        
        # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è
        print(f"\\n–ü–æ–ª—É—á–µ–Ω –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: {inventory}")
    
    @pytest.mark.level1  
    def test_find_pets_by_status_example(self):
        """
        –ü—Ä–∏–º–µ—Ä 2: GET –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–ø–æ–∏—Å–∫ –ø–∏—Ç–æ–º—Ü–µ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É)
        
        –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º:
        - –°—Ç–∞—Ç—É—Å –∫–æ–¥ 200
        - –û—Ç–≤–µ—Ç - —ç—Ç–æ —Å–ø–∏—Å–æ–∫
        - –£ –∫–∞–∂–¥–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
        """
        # GET –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
        response = self.client.get("/pet/findByStatus", params={"status": "available"})
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        assert response.status_code == 200
        pets = response.json()
        assert isinstance(pets, list), "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∏—Ç–æ–º—Ü—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ
        if pets:
            first_pet = pets[0]
            assert "id" in first_pet, "–£ –ø–∏—Ç–æ–º—Ü–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å id"
            assert "name" in first_pet, "–£ –ø–∏—Ç–æ–º—Ü–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–º—è"
            assert "status" in first_pet, "–£ –ø–∏—Ç–æ–º—Ü–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç–∞—Ç—É—Å"
            
            print(f"\\n–ù–∞–π–¥–µ–Ω–æ –ø–∏—Ç–æ–º—Ü–µ–≤: {len(pets)}")
            print(f"–ü–µ—Ä–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü: {first_pet.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}")
    
    @pytest.mark.level1
    def test_user_login_example(self):
        """
        –ü—Ä–∏–º–µ—Ä 3: GET –∑–∞–ø—Ä–æ—Å —Å query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)
        
        –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º:
        - –°—Ç–∞—Ç—É—Å –∫–æ–¥ 200
        - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—Ö–æ–¥–∞
        login_params = {
            "username": "user1",
            "password": "password"
        }
        
        response = self.client.get("/user/login", params=login_params)
        
        # –í –¥–∞–Ω–Ω–æ–º API login –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –∫–æ–¥—ã
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Å–ª—É—á–∞–∏
        if response.status_code == 200:
            result = response.text  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞
            print(f"\\n–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω: {result}")
        else:
            print(f"\\n–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {response.status_code}")
            
        # –ù–µ –¥–µ–ª–∞–µ–º –∂–µ—Å—Ç–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É, —Ç.–∫. —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–µ–º–æ
        assert response.status_code in [200, 400], "–û–∂–∏–¥–∞–ª–∏ 200 –∏–ª–∏ 400" 