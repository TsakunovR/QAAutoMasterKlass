"""
üî¥ LEVEL 4: –°–ª–æ–∂–Ω—ã–µ TODO –∑–∞–¥–∞–Ω–∏—è

–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏, –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏—è, —Ñ–∏–∫—Å—Ç—É—Ä—ã –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã.
–î–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–ó–∞–ø—É—Å–∫: pytest tests/test_level4_advanced_todos.py -v
"""
import pytest
import time
from utils.api_client import APIClient
from config.settings import TEST_PET_DATA, TEST_USER_DATA


@pytest.fixture
def api_client():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è API –∫–ª–∏–µ–Ω—Ç–∞"""
    return APIClient()


@pytest.fixture
def test_pet(api_client):
    """
    TODO: –°–æ–∑–¥–∞—Ç—å —Ñ–∏–∫—Å—Ç—É—Ä—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
    
    –ü–æ–¥—Å–∫–∞–∑–∫–∏:
    - –°–æ–∑–¥–∞–π—Ç–µ –ø–∏—Ç–æ–º—Ü–∞ –≤ setup —á–∞—Å—Ç–∏ —Ñ–∏–∫—Å—Ç—É—Ä—ã
    - –í–µ—Ä–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–∏—Ç–æ–º—Ü–∞
    - –£–¥–∞–ª–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–∞ –≤ teardown —á–∞—Å—Ç–∏ (yield)
    """
    # TODO: –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
    # unique_name = f"FixturePet_{int(time.time())}"
    # pet_data = TEST_PET_DATA.copy()
    # pet_data["name"] = unique_name
    
    # response = api_client.post("/pet", data=pet_data)
    # if response.status_code == 200:
    #     created_pet = response.json()
    #     yield created_pet  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
    #     
    #     # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    #     try:
    #         api_client.delete(f"/pet/{created_pet['id']}")
    #     except:
    #         pass
    # else:
    #     yield None
    
    yield None  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–æ–¥


class TestLevel4AdvancedTodos:
    """–°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏"""
    
    @pytest.mark.level4
    def test_complete_pet_lifecycle(self, api_client):
        """
        TODO: –ü–æ–ª–Ω—ã–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø–∏—Ç–æ–º—Ü–∞
        
        –°—Ü–µ–Ω–∞—Ä–∏–π:
        1. –°–æ–∑–¥–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "available"
        2. –ù–∞–π—Ç–∏ —ç—Ç–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        3. –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ "pending"
        4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –æ–Ω –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ "pending"
        5. –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ "sold"
        6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        7. –£–¥–∞–ª–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞
        8. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø–∏—Ç–æ–º—Ü–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç
        """
        created_pet_id = None
        
        try:
            # TODO: –®–∞–≥ 1 - –°–æ–∑–¥–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞
            # unique_name = f"LifecyclePet_{int(time.time())}"
            # pet_data = TEST_PET_DATA.copy()
            # pet_data["name"] = unique_name
            # pet_data["status"] = "available"
            
            # TODO: –®–∞–≥ 2 - –ù–∞–π—Ç–∏ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
            # TODO: –®–∞–≥ 3 - –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ "pending"
            # TODO: –®–∞–≥ 4 - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ —Å–ø–∏—Å–∫–µ "pending"
            # TODO: –®–∞–≥ 5 - –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ "sold"
            # TODO: –®–∞–≥ 6 - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –Ω–µ—Ç –≤ "available"
            # TODO: –®–∞–≥ 7 - –£–¥–∞–ª–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞
            # TODO: –®–∞–≥ 8 - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø–∏—Ç–æ–º—Ü–∞ –Ω–µ—Ç
            
            pass  # –£–¥–∞–ª–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∫–æ–≥–¥–∞ –Ω–∞–ø–∏—à–µ—Ç–µ –∫–æ–¥
            
        finally:
            # –û—á–∏—Å—Ç–∫–∞
            if created_pet_id:
                try:
                    api_client.delete(f"/pet/{created_pet_id}")
                except:
                    pass
    
    @pytest.mark.level4
    @pytest.mark.parametrize("status", ["available", "pending", "sold"])
    def test_pets_by_status_parametrized(self, api_client, status):
        """
        TODO: –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–∏—Ç–æ–º—Ü–µ–≤
        
        –ü–æ–¥—Å–∫–∞–∑–∫–∏:
        - –¢–µ—Å—Ç –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω 3 —Ä–∞–∑–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        - –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å–ª—É—á–∞–π –∫–æ–≥–¥–∞ –ø–∏—Ç–æ–º—Ü–µ–≤ –Ω–µ—Ç
        """
        
        # TODO: –ü–æ–ª—É—á–∏—Ç—å –ø–∏—Ç–æ–º—Ü–µ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        # response = api_client.get("/pet/findByStatus", params={"status": status})
        
        # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        # assert response.status_code == 200
        
        # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ –ø–∏—Ç–æ–º—Ü—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        # pets = response.json()
        # assert isinstance(pets, list)
        
        # for pet in pets:
        #     assert pet.get("status") == status, f"–ü–∏—Ç–æ–º–µ—Ü {pet.get('name')} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å {pet.get('status')}, –æ–∂–∏–¥–∞–ª–∏ {status}"
        
        # print(f"\\n–ù–∞–π–¥–µ–Ω–æ –ø–∏—Ç–æ–º—Ü–µ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}': {len(pets)}")
        
        pass  # –£–¥–∞–ª–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∫–æ–≥–¥–∞ –Ω–∞–ø–∏—à–µ—Ç–µ –∫–æ–¥
    
    @pytest.mark.level4
    def test_user_registration_and_login_flow(self, api_client):
        """
        TODO: –ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        –°—Ü–µ–Ω–∞—Ä–∏–π:
        1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω (GET /user/{username})
        3. –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥ (GET /user/login)
        4. –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        5. –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã—Ö–æ–¥ (GET /user/logout)
        6. –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        created_username = None
        
        try:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            pass  # –£–¥–∞–ª–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∫–æ–≥–¥–∞ –Ω–∞–ø–∏—à–µ—Ç–µ –∫–æ–¥
            
        finally:
            # –û—á–∏—Å—Ç–∫–∞
            if created_username:
                try:
                    api_client.delete(f"/user/{created_username}")
                except:
                    pass
    
    @pytest.mark.level4
    def test_order_workflow_with_inventory_check(self, api_client):
        """
        TODO: –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–∫–∞–∑–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        
        –°—Ü–µ–Ω–∞—Ä–∏–π:
        1. –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        2. –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
        3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–∑–º–µ–Ω–∏–ª—Å—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        4. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        5. –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        """
        
        # TODO: –®–∞–≥ 1 - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–æ –∑–∞–∫–∞–∑–∞
        # initial_response = api_client.get("/store/inventory")
        # assert initial_response.status_code == 200
        # initial_inventory = initial_response.json()
        
        # TODO: –®–∞–≥ 2 - –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
        # from datetime import datetime
        # order_data = {
        #     "petId": 1,
        #     "quantity": 1,
        #     "shipDate": datetime.now().isoformat(),
        #     "status": "placed",
        #     "complete": False
        # }
        
        # TODO: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Å—Ü–µ–Ω–∞—Ä–∏—è
        
        pass  # –£–¥–∞–ª–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∫–æ–≥–¥–∞ –Ω–∞–ø–∏—à–µ—Ç–µ –∫–æ–¥
    
    @pytest.mark.level4
    def test_data_consistency_check(self, api_client, test_pet):
        """
        TODO: –¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–∫—Å—Ç—É—Ä—É test_pet –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:
        - –ü–∏—Ç–æ–º–µ—Ü –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ GET /pet/{id}
        - –ü–∏—Ç–æ–º–µ—Ü –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        - –î–∞–Ω–Ω—ã–µ –ø–∏—Ç–æ–º—Ü–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã –≤–æ –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö
        """
        
        # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ñ–∏–∫—Å—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–ª–∞ –ø–∏—Ç–æ–º—Ü–∞
        # if test_pet is None:
        #     pytest.skip("–¢–µ—Å—Ç–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
        
        # pet_id = test_pet["id"]
        # pet_name = test_pet["name"]
        # pet_status = test_pet["status"]
        
        # TODO: –ü–æ–ª—É—á–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –ø–æ ID
        # direct_response = api_client.get(f"/pet/{pet_id}")
        # assert direct_response.status_code == 200
        # direct_pet = direct_response.json()
        
        # TODO: –ù–∞–π—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞ –≤ —Å–ø–∏—Å–∫–µ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        # status_response = api_client.get("/pet/findByStatus", params={"status": pet_status})
        # assert status_response.status_code == 200
        # pets_by_status = status_response.json()
        
        # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø–∏—Ç–æ–º–µ—Ü –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
        # found_pet = None
        # for pet in pets_by_status:
        #     if pet["id"] == pet_id:
        #         found_pet = pet
        #         break
        
        # assert found_pet is not None, f"–ü–∏—Ç–æ–º–µ—Ü {pet_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–æ —Å—Ç–∞—Ç—É—Å—É {pet_status}"
        
        # TODO: –°—Ä–∞–≤–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        # assert direct_pet["name"] == found_pet["name"]
        # assert direct_pet["status"] == found_pet["status"]
        
        pass  # –£–¥–∞–ª–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∫–æ–≥–¥–∞ –Ω–∞–ø–∏—à–µ—Ç–µ –∫–æ–¥


class TestLevel4ErrorHandling:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    
    @pytest.mark.level4
    @pytest.mark.parametrize("pet_id,expected_status", [
        (999999, 404),  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
        (-1, 400),      # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π ID
        (0, 400),       # –ù—É–ª–µ–≤–æ–π ID
    ])
    def test_get_pet_error_cases(self, api_client, pet_id, expected_status):
        """
        TODO: –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        
        –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞
        """
        
        # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º ID
        # response = api_client.get(f"/pet/{pet_id}")
        
        # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏
        # assert response.status_code == expected_status
        
        # print(f"\\nID {pet_id} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
        
        pass  # –£–¥–∞–ª–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∫–æ–≥–¥–∞ –Ω–∞–ø–∏—à–µ—Ç–µ –∫–æ–¥
    
    @pytest.mark.level4
    def test_concurrent_pet_creation(self, api_client):
        """
        TODO: –¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ç–æ–º—Ü–µ–≤
        
        –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∏—Ç–æ–º—Ü–µ–≤ "–æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ" –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:
        - –í—Å–µ –ø–∏—Ç–æ–º—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ
        - –£ –≤—Å–µ—Ö —Ä–∞–∑–Ω—ã–µ ID
        - –í—Å–µ –ø–∏—Ç–æ–º—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ API
        """
        
        # TODO: –°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ —Ü–∏–∫–ª–µ
        # created_pets = []
        # 
        # for i in range(3):
        #     unique_name = f"ConcurrentPet_{int(time.time())}_{i}"
        #     pet_data = TEST_PET_DATA.copy()
        #     pet_data["name"] = unique_name
        #     
        #     response = api_client.post("/pet", data=pet_data)
        #     if response.status_code == 200:
        #         created_pets.append(response.json())
        
        # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ –ø–∏—Ç–æ–º—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
        # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID
        # TODO: –û—á–∏—Å—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤
        
        pass  # –£–¥–∞–ª–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∫–æ–≥–¥–∞ –Ω–∞–ø–∏—à–µ—Ç–µ –∫–æ–¥ 