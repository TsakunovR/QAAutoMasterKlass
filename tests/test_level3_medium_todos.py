"""
üü† LEVEL 3: –°—Ä–µ–¥–Ω–∏–µ TODO –∑–∞–¥–∞–Ω–∏—è

–†–∞–±–æ—Ç–∞ —Å POST/PUT –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö.
–¢—Ä–µ–±—É–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏—è HTTP –º–µ—Ç–æ–¥–æ–≤ –∏ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä.

–ó–∞–ø—É—Å–∫: pytest tests/test_level3_medium_todos.py -v
"""
import pytest
from utils.api_client import APIClient
from config.settings import TEST_PET_DATA, TEST_USER_DATA


class TestLevel3MediumTodos:
    """–°—Ä–µ–¥–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö"""
    
    def setup_method(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.client = APIClient()
        self.created_pet_ids = []  # –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
        self.created_usernames = []  # –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
    
    def teardown_method(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        # –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤
        for pet_id in self.created_pet_ids:
            try:
                self.client.delete(f"/pet/{pet_id}")
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for username in self.created_usernames:
            try:
                self.client.delete(f"/user/{username}")
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ
    
    @pytest.mark.level3
    def test_create_new_pet(self):
        """
        TODO: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ —á–µ—Ä–µ–∑ POST –∑–∞–ø—Ä–æ—Å
        
        –ü–æ–¥—Å–∫–∞–∑–∫–∏:
        - –≠–Ω–¥–ø–æ–∏–Ω—Ç: /pet
        - HTTP –º–µ—Ç–æ–¥: POST
        - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ TEST_PET_DATA –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        - –î–æ–±–∞–≤—å—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞
        """
        
        # TODO: –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ TEST_PET_DATA –∫–∞–∫ –æ—Å–Ω–æ–≤—É –∏ –¥–æ–±–∞–≤—å—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        # import time
        # unique_name = f"TestPet_{int(time.time())}"
        # pet_data = TEST_PET_DATA.copy()
        # pet_data["name"] = unique_name
        
        # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å POST –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞
        # response = self.client.post("/pet", data=pet_data)
        
        # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø–∏—Ç–æ–º–µ—Ü —Å–æ–∑–¥–∞–Ω (—Å—Ç–∞—Ç—É—Å 200)
        # assert response.status_code == 200
        
        # TODO: –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
        # created_pet = response.json()
        
        # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø–∏—Ç–æ–º–µ—Ü –∏–º–µ–µ—Ç ID –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è
        # assert "id" in created_pet
        # assert created_pet["name"] == unique_name
        
        # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å ID –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤ teardown_method
        # pet_id = created_pet["id"]
        # self.created_pet_ids.append(pet_id)
        
        # print(f"\\n–°–æ–∑–¥–∞–Ω –ø–∏—Ç–æ–º–µ—Ü: {created_pet['name']} —Å ID: {pet_id}")
        
        pass  # –£–¥–∞–ª–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∫–æ–≥–¥–∞ –Ω–∞–ø–∏—à–µ—Ç–µ –∫–æ–¥
    
    @pytest.mark.level3
    def test_update_existing_pet(self):
        """
        TODO: –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ —á–µ—Ä–µ–∑ PUT –∑–∞–ø—Ä–æ—Å
        
        –ü–æ–¥—Å–∫–∞–∑–∫–∏:
        - –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–∏—Ç–æ–º—Ü–∞ (POST /pet)
        - –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–∏—Ç–µ –µ–≥–æ (PUT /pet)
        - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
        """
        
        # TODO: –®–∞–≥ 1 - –°–æ–∑–¥–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞
        # import time
        # original_name = f"OriginalPet_{int(time.time())}"
        # pet_data = TEST_PET_DATA.copy()
        # pet_data["name"] = original_name
        
        # create_response = self.client.post("/pet", data=pet_data)
        # assert create_response.status_code == 200
        # created_pet = create_response.json()
        # pet_id = created_pet["id"]
        # self.created_pet_ids.append(pet_id)
        
        # TODO: –®–∞–≥ 2 - –û–±–Ω–æ–≤–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞
        # updated_name = f"UpdatedPet_{int(time.time())}"
        # updated_pet_data = created_pet.copy()
        # updated_pet_data["name"] = updated_name
        # updated_pet_data["status"] = "sold"  # –ò–∑–º–µ–Ω–∏–º —Å—Ç–∞—Ç—É—Å
        
        # update_response = self.client.put("/pet", data=updated_pet_data)
        # assert update_response.status_code == 200
        
        # TODO: –®–∞–≥ 3 - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
        # get_response = self.client.get(f"/pet/{pet_id}")
        # if get_response.status_code == 200:
        #     updated_pet = get_response.json()
        #     assert updated_pet["name"] == updated_name
        #     assert updated_pet["status"] == "sold"
        #     print(f"\\n–ü–∏—Ç–æ–º–µ—Ü –æ–±–Ω–æ–≤–ª–µ–Ω: {original_name} -> {updated_name}")
        
        pass  # –£–¥–∞–ª–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∫–æ–≥–¥–∞ –Ω–∞–ø–∏—à–µ—Ç–µ –∫–æ–¥
    
    @pytest.mark.level3
    def test_create_user(self):
        """
        TODO: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        –ü–æ–¥—Å–∫–∞–∑–∫–∏:
        - –≠–Ω–¥–ø–æ–∏–Ω—Ç: /user
        - HTTP –º–µ—Ç–æ–¥: POST
        - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ TEST_USER_DATA –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        - –°–¥–µ–ª–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        
        # TODO: –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # import time
        # unique_username = f"testuser_{int(time.time())}"
        # user_data = TEST_USER_DATA.copy()
        # user_data["username"] = unique_username
        # user_data["email"] = f"{unique_username}@example.com"
        
        # TODO: –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # response = self.client.post("/user", data=user_data)
        
        # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
        # –í —ç—Ç–æ–º API POST /user –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        # assert response.status_code in [200, 201]
        
        # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å username –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        # self.created_usernames.append(unique_username)
        
        # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
        # get_response = self.client.get(f"/user/{unique_username}")
        # if get_response.status_code == 200:
        #     user = get_response.json()
        #     assert user["username"] == unique_username
        #     print(f"\\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {unique_username}")
        
        pass  # –£–¥–∞–ª–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∫–æ–≥–¥–∞ –Ω–∞–ø–∏—à–µ—Ç–µ –∫–æ–¥
    
    @pytest.mark.level3
    def test_place_order(self):
        """
        TODO: –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
        
        –ü–æ–¥—Å–∫–∞–∑–∫–∏:
        - –≠–Ω–¥–ø–æ–∏–Ω—Ç: /store/order
        - HTTP –º–µ—Ç–æ–¥: POST
        - –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ Order
        """
        
        # TODO: –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        # import time
        # from datetime import datetime
        # 
        # order_data = {
        #     "petId": 1,  # ID –ø–∏—Ç–æ–º—Ü–∞
        #     "quantity": 1,
        #     "shipDate": datetime.now().isoformat(),
        #     "status": "placed",
        #     "complete": False
        # }
        
        # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å POST –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        # response = self.client.post("/store/order", data=order_data)
        
        # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        # assert response.status_code in [200, 201]
        
        # TODO: –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        # if response.status_code in [200, 201]:
        #     order = response.json()
        #     assert "id" in order
        #     assert order["petId"] == 1
        #     assert order["status"] == "placed"
        #     print(f"\\n–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —Å ID: {order.get('id')}")
        
        pass  # –£–¥–∞–ª–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∫–æ–≥–¥–∞ –Ω–∞–ø–∏—à–µ—Ç–µ –∫–æ–¥
    
    @pytest.mark.level3
    def test_update_user(self):
        """
        TODO: –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        –ü–æ–¥—Å–∫–∞–∑–∫–∏:
        - –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ PUT /user/{username}
        - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        """
        
        # TODO: –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–¥ –∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω test_create_user)
        
        # TODO: –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # updated_data = user_data.copy()
        # updated_data["firstName"] = "UpdatedName"
        # updated_data["email"] = f"updated_{unique_username}@example.com"
        
        # update_response = self.client.put(f"/user/{unique_username}", data=updated_data)
        
        # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        # TODO: –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        
        pass  # –£–¥–∞–ª–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∫–æ–≥–¥–∞ –Ω–∞–ø–∏—à–µ—Ç–µ –∫–æ–¥


class TestLevel3Validation:
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é"""
    
    def setup_method(self):
        self.client = APIClient()
    
    @pytest.mark.level3
    def test_create_pet_validation(self):
        """
        TODO: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞
        
        –ü–æ–¥—Å–∫–∞–∑–∫–∏:
        - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        
        # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å POST –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        # invalid_data = {"name": ""}  # –ü—É—Å—Ç–æ–µ –∏–º—è
        # response = self.client.post("/pet", data=invalid_data)
        
        # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ (4xx —Å—Ç–∞—Ç—É—Å)
        # assert 400 <= response.status_code < 500
        
        pass  # –£–¥–∞–ª–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∫–æ–≥–¥–∞ –Ω–∞–ø–∏—à–µ—Ç–µ –∫–æ–¥ 