#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ —Ä–∞–±–æ—Ç–µ
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
"""

import sys
import subprocess
import importlib
import platform
import requests

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    print("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
    version = sys.version_info
    if version.major == 3 and version.minor >= 8:
        print(f"   ‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
        return True
    else:
        print(f"   ‚ùå Python {version.major}.{version.minor} - —Ç—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+")
        return False

def check_package(package_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞"""
    try:
        importlib.import_module(package_name)
        return True
    except ImportError:
        return False

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    packages = {
        'pytest': 'pytest',
        'requests': 'requests', 
        'jsonschema': 'jsonschema',
        'pytest_html': 'pytest-html'
    }
    
    all_ok = True
    for import_name, package_name in packages.items():
        if check_package(import_name):
            print(f"   ‚úÖ {package_name} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print(f"   ‚ùå {package_name} - –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            all_ok = False
    
    return all_ok

def check_api_access():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
    print("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...")
    try:
        response = requests.get(
            "https://swagger.rv-school.ru/api/v3/store/inventory", 
            timeout=10
        )
        if response.status_code == 200:
            print("   ‚úÖ API –¥–æ—Å—Ç—É–ø–Ω–æ")
            return True
        else:
            print(f"   ‚ö†Ô∏è  API –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")
        return False

def check_pytest_markers():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã pytest –º–∞—Ä–∫–µ—Ä–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ pytest –º–∞—Ä–∫–µ—Ä–æ–≤...")
    try:
        result = subprocess.run([
            sys.executable, "-m", "pytest", 
            "--collect-only", "-q"
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("   ‚úÖ pytest –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - OK")
            return True
        else:
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å pytest –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
            print(f"      {result.stderr[:200]}...")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ pytest: {e}")
        return False

def main():
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è QA –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞")
    print("=" * 50)
    
    checks = [
        check_python_version(),
        check_dependencies(),
        check_api_access(),
        check_pytest_markers()
    ]
    
    print("\n" + "=" * 50)
    
    if all(checks):
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        print("\nüìã –ß—Ç–æ –¥–∞–ª—å—à–µ:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: pytest tests/test_level1_examples.py -v")
        print("   2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python generate_report.py level1")
        print("   3. –ò–∑—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –≤ tests/test_level1_examples.py")
        return True
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt (–∏–ª–∏ pip3)")
        print("   2. –û–±–Ω–æ–≤–∏—Ç–µ Python –¥–æ –≤–µ—Ä—Å–∏–∏ 3.8+")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 